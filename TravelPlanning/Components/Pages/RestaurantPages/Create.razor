@page "/restaurants/create"
@page "/restaurants/create/{TripId:int}"

@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<div class="background-container">
<h1>Create Restaurant</h1>

<div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow">
        <div class="card-body">
             <h2 class="card-title text-center text-success mb-4">Restaurant Details</h2>
        <EditForm method="post" Model="Restaurant" OnValidSubmit="AddRestaurant" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="row">
            <div class="mb-3" hidden>
                <label for="tripid" class="form-label">TripId:</label> 
                <InputNumber id="tripid" @bind-Value="Restaurant.TripId" class="form-control" /> 
                <ValidationMessage For="() => Restaurant.TripId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="resturantname" class="form-label">RestaurantName:</label> 
                <InputText id="resturantname" @bind-Value="Restaurant.ResturantName" class="form-control" /> 
                <ValidationMessage For="() => Restaurant.ResturantName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label> 
                <InputText id="address" @bind-Value="Restaurant.Address" class="form-control" /> 
                <ValidationMessage For="() => Restaurant.Address" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datevisited" class="form-label">DateVisited:</label> 
                <InputDate id="datevisited" @bind-Value="Restaurant.DateVisited" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                <ValidationMessage For="() => Restaurant.DateVisited" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Restaurant.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Restaurant.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="dataupdated" class="form-label">DataUpdated:</label> 
                <InputDate id="dataupdated" @bind-Value="Restaurant.DataUpdated" class="form-control" /> 
                <ValidationMessage For="() => Restaurant.DataUpdated" class="text-danger" /> 
            </div>  
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
            <div class="text-center mt-4">
                <a href="/restaurants/@TripId">View Trip Restaurant</a>
                <br />
                <a href="/plan/@TripId">Cancel</a>
            </div>
        </div>
     </div>
   </div>
  </div>
</div>


@code {
    [Parameter]
    public int TripId { get; set; }

    [SupplyParameterFromForm]
    private Restaurant Restaurant { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Set default dates
        Restaurant.DateCreated = DateTime.UtcNow;
        Restaurant.DataUpdated = DateTime.UtcNow;

        using var context = DbFactory.CreateDbContext();

        {
            // Verify the trip
            var trip = await context.Trip
                .FirstOrDefaultAsync(t => t.Id == TripId);

            if (trip != null)
            {
                // Trip doesn't exist or doesn't belong to this user
                Restaurant.TripId = trip.Id;
            }

            else
            {
                NavigationManager.NavigateTo("/error", true);
                return;
            }
        }
    }
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddRestaurant()
    {
        using var context = DbFactory.CreateDbContext();
        context.Restaurant.Add(Restaurant);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/trips/details?id={Restaurant.TripId}");
    }
}
