@page "/restaurants/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelPlanning.Domain
@using TravelPlanning.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Restaurant @TripId</PageTitle>


<QuickGrid Class="table" Items="filteredRestaurants">
    <PropertyColumn Property="restaurant => restaurant.TripId" />
    <PropertyColumn Property="restaurant => restaurant.ResturantName" />
    <PropertyColumn Property="restaurant => restaurant.Address" />
    <PropertyColumn Property="restaurant => restaurant.DateVisited" />
    <PropertyColumn Property="restaurant => restaurant.DateCreated" />
    <PropertyColumn Property="restaurant => restaurant.DataUpdated" />

    <TemplateColumn Context="restaurant">
        <a href="/restaurants/edit/@restaurant.Id/@TripId" class="btn btn-secondary btn-sm">Edit</a> |
        <a href="/restaurants/details/@restaurant.Id/@TripId" class="btn btn-info btn-sm">Details</a> |
        <a href="/restaurants/delete/@restaurant.Id/@TripId" class="btn btn-danger btn-sm">Delete</a>
    </TemplateColumn>
</QuickGrid>
<div class="mt-3">
    <a href="/plan/@TripId" class="btn btn-secondary">Continue planning</a>
</div>

@code {
    [Parameter]
    public int TripId { get; set; }
    [SupplyParameterFromForm]
    private Restaurant Restaurant { get; set; } = new();

    private TravelPlanningContext context = default!;
    private IQueryable<Restaurant> filteredRestaurants;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }

        context = DbFactory.CreateDbContext();

        var trip = await context.Trip
            .FirstOrDefaultAsync(t => t.Id == TripId);

        if (trip != null)
        {
            filteredRestaurants = context.Restaurant
                .Where(f => f.TripId == TripId)
                .AsNoTracking();
        }
        else
        {
            NavigationManager.NavigateTo("/error", true);
            return;
        }
    }
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
