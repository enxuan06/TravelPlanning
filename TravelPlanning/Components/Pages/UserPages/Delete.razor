@page "/users/delete"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Data
@using TravelPlanning.Domain
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<TravelPlanningUser> UserManager


@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this User?</p>
<div>
    <h2>User</h2>
    <hr />
    @if (user is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">IdentityUserId</dt>
            <dd class="col-sm-10">@user.IdentityUserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserName</dt>
            <dd class="col-sm-10">@user.UserName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DomainUsername</dt>
            <dd class="col-sm-10">@user.DomainUsername</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@user.DateCreated</dd>
        </dl>
        <EditForm method="post" Model="user" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(user is null)">Delete</button> |
            <a href="/users">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private User? user;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.User.FirstOrDefaultAsync(m => m.Id == Id);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUser()
    {
        if (user is null) return;

        using var context = DbFactory.CreateDbContext();

        // Delete IdentityUser first
        if (!string.IsNullOrEmpty(user.IdentityUserId))
        {
            var identityUser = await UserManager.FindByIdAsync(user.IdentityUserId);
            if (identityUser != null)
            {
                await UserManager.DeleteAsync(identityUser);
            }
        }

        NavigationManager.NavigateTo("/users");
    }
}
