@page "/trips/create"

@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Create</PageTitle>

<div class="background-container">

    <h1 style="color: white;">Create Trip</h1>
 
<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card shadow">
            <div class="card-body">
                <h2 class="card-title text-center text-success mb-4">Trip Details</h2>
                <EditForm method="post" Model="Trip" OnValidSubmit="AddTrip" FormName="create" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                   <div class="row"> 
                        <div class="col-md-6 mb-3">
                        <label for="tripname" class="form-label">TripName:</label>
                        <InputText id="tripname" @bind-Value="Trip.TripName" class="form-control" />
                        <ValidationMessage For="() => Trip.TripName" class="text-danger" />
                    </div>
                        <div class="col-md-6 mb-3">
                            <label for="country" class="form-label">Country:</label>
                            <InputSelect id="country" @bind-Value="Trip.Country" class="form-control">
                                <option value="">Select a country</option>
                                @foreach (var country in Countries)
                                {
                                    <option value="@country">@country</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Trip.Country" class="text-danger" />
                        </div>

                   </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                        <label for="startdate" class="form-label">StartDate:</label>
                        <InputDate id="startdate" @bind-Value="Trip.StartDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <ValidationMessage For="() => Trip.StartDate" class="text-danger" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="enddate" class="form-label">EndDate:</label>
                        <InputDate id="enddate" @bind-Value="Trip.EndDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <ValidationMessage For="() => Trip.EndDate" class="text-danger" />
                    </div>
                    </div>
                    <div class="col-md-6 mb-3" hidden>
                        <InputNumber type="hidden" @bind-Value="Trip.UserId" />
                    </div>
                    <button type="submit" class="btn btn-primary">Create</button>
                </EditForm>
                    <div class="text-center mt-4">
                        <a href="/trips">Back to List</a>
                    </div>
            </div>
        </div>
    </div>
</div>
</div>



@code {
    [SupplyParameterFromForm]
    private Trip Trip { get; set; } = new();

    private List<string> Countries = new()
{
    "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", "Argentina", "Armenia", "Australia",
    "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bali",
    "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi",
    "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Republic", "Chad", "Chile", "China", "Colombia",
    "Comoros", "Congo (Congo-Brazzaville)", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Democratic Republic of the Congo",
    "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea",
    "Estonia", "Eswatini", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", "Germany", "Ghana",
    "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hungary", "Iceland", "India",
    "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati",
    "Kuwait", "Kyrgyzstan", "Korea", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania",
    "Luxembourg", "London", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania",
    "Mauritius", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar",
    "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "North Macedonia",
    "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland",
    "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines",
    "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone",
    "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa",  "South Sudan",
    "Spain", "Sri Lanka", "Sudan", "Suriname", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania",
    "Thailand", "Timor-Leste", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu",
    "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu",
    "Vatican City", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
};


    protected override void OnInitialized()
    {
        base.OnInitialized();
        var query = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryparams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(query);
        if (queryparams.TryGetValue("location", out var location))
        {
            Trip.Country = location.ToString();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set default dates
        Trip.DateCreated = DateTime.UtcNow;
        Trip.DataUpdated = DateTime.UtcNow;

        // Get the current user's ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("/Account/Login", true);
            return;
        }

        using var context = DbFactory.CreateDbContext();
        var identityUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(identityUserId))
        {
            // Find the corresponding User record using IdentityUserId
            var dbUser = await context.User
                .FirstOrDefaultAsync(u => u.IdentityUserId == identityUserId);

            if (dbUser != null)
            {
                Trip.UserId = dbUser.Id; // Set the numeric UserId from your User table
            }
            else
            {
                // Handle case where User record doesn't exist
                NavigationManager.NavigateTo("/error", true);
                return;
            }
        }
    }

    private async Task AddTrip()
    {
        using var context = DbFactory.CreateDbContext();
        context.Trip.Add(Trip);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/plan/{Trip.Id}");
    }
}