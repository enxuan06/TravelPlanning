@page "/trips/create"

@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create</PageTitle>

<h1>Create Trip</h1>
 
<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card shadow">
            <div class="card-body">
                <h2 class="card-title text-center text-success mb-4">Trip Details</h2>
                <EditForm method="post" Model="Trip" OnValidSubmit="AddTrip" FormName="create" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                   <div class="row"> 
                        <div class="col-md-6 mb-3">
                        <label for="tripname" class="form-label">TripName:</label>
                        <InputText id="tripname" @bind-Value="Trip.TripName" class="form-control" />
                        <ValidationMessage For="() => Trip.TripName" class="text-danger" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="country" class="form-label">Country:</label>
                        <InputText id="country" @bind-Value="Trip.Country" class="form-control" />
                        <ValidationMessage For="() => Trip.Country" class="text-danger" />
                    </div
                   </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                        <label for="startdate" class="form-label">StartDate:</label>
                        <InputDate id="startdate" @bind-Value="Trip.StartDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <ValidationMessage For="() => Trip.StartDate" class="text-danger" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="enddate" class="form-label">EndDate:</label>
                        <InputDate id="enddate" @bind-Value="Trip.EndDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <ValidationMessage For="() => Trip.EndDate" class="text-danger" />
                    </div>
                    </div>
                    <div class="col-md-6 mb-3" hidden>
                        <InputNumber type="hidden" @bind-Value="Trip.UserId" />
                    </div>
                    <button type="submit" class="btn btn-primary">Create</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="text-center mt-4">
    <a href="/trips">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Trip Trip { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var query = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryparams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(query);

        if (queryparams.TryGetValue("location", out var location))
        {
            Trip.Country = location.ToString();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set default dates
        Trip.DateCreated = DateTime.UtcNow;
        Trip.DataUpdated = DateTime.UtcNow;

        // Get the current user's ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
            return;
        }

        using var context = DbFactory.CreateDbContext();
        var identityUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(identityUserId))
        {
            // Find the corresponding User record using IdentityUserId
            var dbUser = await context.User
                .FirstOrDefaultAsync(u => u.IdentityUserId == identityUserId);

            if (dbUser != null)
            {
                Trip.UserId = dbUser.Id; // Set the numeric UserId from your User table
            }
            else
            {
                // Handle case where User record doesn't exist
                NavigationManager.NavigateTo("/error", true);
                return;
            }
        }
    }

    private async Task AddTrip()
    {
        using var context = DbFactory.CreateDbContext();
        context.Trip.Add(Trip);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/plan/{Trip.Id}");
    }
}