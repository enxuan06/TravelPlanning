@page "/flights/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelPlanning.Domain
@using TravelPlanning.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Flights</PageTitle>

<QuickGrid Class="table" Items="@filteredFlights">
    <AuthorizeView>
    <PropertyColumn Property="flight => flight.TripId" />
    </AuthorizeView>
    <PropertyColumn Property="flight => flight.AirlineName" />
    <PropertyColumn Property="flight => flight.DepartureDate " />
    <PropertyColumn Property="flight => flight.DataUpdated" Format="dd-MM-yyyy" />
    <TemplateColumn Context="flight">
        <a href="/flights/edit/@flight.Id/@TripId" class="btn btn-secondary btn-sm">Edit</a> |
        <a href="/flights/details/@flight.Id/@TripId" class="btn btn-info btn-sm">Details</a> |
        <a href="/flights/delete/@flight.Id/@TripId" class="btn btn-danger btn-sm">Delete</a>
    </TemplateColumn>
</QuickGrid>
<div class="mt-3">
    <a href="/plan/@TripId" class="btn btn-secondary">Continue planning</a>
    <br />
    
</div>

@code {
    [Parameter]
    public int TripId { get; set; }

    private TravelPlanningContext context = default!;
    private IQueryable<Flight> filteredFlights;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }

        context = DbFactory.CreateDbContext();

        var trip = await context.Trip
            .FirstOrDefaultAsync(t => t.Id == TripId);

        if (trip != null)
        {
            filteredFlights = context.Flight
                .Where(f => f.TripId == TripId)
                .AsNoTracking();
        }
        else
        {
            NavigationManager.NavigateTo("/error", true);
            return;
        }
    }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}