@page "/itineraryplans/create"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>ItineraryPlan</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="ItineraryPlan" OnValidSubmit="AddItineraryPlan" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="activities" class="form-label">Activities:</label> 
                <InputText id="activities" @bind-Value="ItineraryPlan.Activities" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.Activities" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="budget" class="form-label">Budget:</label> 
                <InputNumber id="budget" @bind-Value="ItineraryPlan.Budget" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.Budget" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label> 
                <InputNumber id="userid" @bind-Value="ItineraryPlan.UserId" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.UserId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="destinationid" class="form-label">DestinationId:</label> 
                <InputNumber id="destinationid" @bind-Value="ItineraryPlan.DestinationId" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.DestinationId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="ItineraryPlan.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dataupdated" class="form-label">DataUpdated:</label> 
                <InputDate id="dataupdated" @bind-Value="ItineraryPlan.DataUpdated" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.DataUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="ItineraryPlan.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="ItineraryPlan.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => ItineraryPlan.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/itineraryplans">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private ItineraryPlan ItineraryPlan { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddItineraryPlan()
    {
        using var context = DbFactory.CreateDbContext();
        context.ItineraryPlan.Add(ItineraryPlan);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/itineraryplans");
    }
}
