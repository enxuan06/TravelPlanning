@page "/lodgings/details"
@page "/lodgings/details/{Id:int}/{TripId:int}"

@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details @TripId</h1>

<div>
    <h2>Lodging</h2>
    <hr />
    @if (lodging is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TripId</dt>
            <dd class="col-sm-10">@lodging.TripId</dd>
            <dt class="col-sm-2">HotelName</dt>
            <dd class="col-sm-10">@lodging.HotelName</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@lodging.Address</dd>
            <dt class="col-sm-2">CheckInDate</dt>
            <dd class="col-sm-10">@lodging.CheckInDate</dd>
            <dt class="col-sm-2">CheckOutDate</dt>
            <dd class="col-sm-10">@lodging.CheckOutDate</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@lodging.DateCreated</dd>
            <dt class="col-sm-2">DataUpdated</dt>
            <dd class="col-sm-10">@lodging.DataUpdated</dd>
        </dl>
        <div>
            <a href="/lodgings/edit/@lodging.Id/@TripId" class="btn btn-primary">Edit</a> |
            <a href="/lodgings/@TripId" class="btn btn-secondary">Back to List</a>
        </div>
    }
</div>

@code {
    private Lodging? lodging;
    [Parameter]
    public int TripId { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        lodging = await context.Lodging.FirstOrDefaultAsync(m => m.Id == Id && m.TripId == TripId);

        if (lodging is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    
}
