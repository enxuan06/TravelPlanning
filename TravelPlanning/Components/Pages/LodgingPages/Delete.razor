
@page "/lodgings/delete/{Id:int}/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete @TripId</PageTitle>
<h2>Are you sure you want to delete ?</h2>
<hr />
<div>
    
    @if (lodging is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">TripId</dt>
            <dd class="col-sm-10">@lodging.TripId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HotelName</dt>
            <dd class="col-sm-10">@lodging.HotelName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@lodging.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CheckInDate</dt>
            <dd class="col-sm-10">@lodging.CheckInDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CheckOutDate</dt>
            <dd class="col-sm-10">@lodging.CheckOutDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@lodging.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DataUpdated</dt>
            <dd class="col-sm-10">@lodging.DataUpdated</dd>
        </dl>
        <EditForm method="post" Model="lodging" OnValidSubmit="DeleteLodging" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(lodging is null)">Delete</button> |
            <a href="/lodgings/@TripId" class="btn btn-secondary">Cancel</a>
        </EditForm>
    }
</div>

@code {
    private Lodging? lodging;

    [Parameter]
    public int TripId { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        lodging = await context.Lodging.FirstOrDefaultAsync(m => m.Id == Id && m.TripId == TripId);

        if (lodging == null)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }
    }

    private async Task DeleteLodging()
    {
        if (lodging == null) return;

        using var context = DbFactory.CreateDbContext();
        context.Lodging.Remove(lodging);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/lodgings/{lodging.TripId}");
    }
}