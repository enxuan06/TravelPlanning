@page "/lodgings/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelPlanning.Domain
@using TravelPlanning.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Lodging @TripId </PageTitle>


<QuickGrid Class="table" Items="@filteredLodgings">
    <AuthorizeView>
    <PropertyColumn Property="lodging => lodging.TripId" />
     <PropertyColumn Property="lodging => lodging.DateCreated" Format="dd-MM-yyyy" />

    </AuthorizeView>
    <PropertyColumn Property="lodging => lodging.HotelName" />
    <PropertyColumn Property="lodging => lodging.Address" />
    <PropertyColumn Property="lodging => lodging.CheckInDate" Format="dd-MM-yyyy"/>
    <PropertyColumn Property="lodging => lodging.CheckOutDate" Format="dd-MM-yyyy"/>
    <PropertyColumn Property="lodging => lodging.DataUpdated" Format="dd-MM-yyyy"/>
    <TemplateColumn Context="lodging">
        <a href="/lodgings/edit/@lodging.Id/@TripId" class="btn btn-secondary btn-sm">Edit</a> |
        <a href="/lodgings/details/@lodging.Id/@TripId" class="btn btn-info btn-sm">Details</a> |
        <a href="/lodgings/delete/@lodging.Id/@TripId" class="btn btn-danger btn-sm">Delete</a>
    </TemplateColumn>
</QuickGrid>

<div class="mt-3">
    <a href="/plan/@TripId" class="btn btn-secondary">Continue planning</a>
</div>

@code {
    [Parameter]
    public int TripId { get; set; }
    
    [SupplyParameterFromForm]
    private Lodging Lodging { get; set; } = new();
    
    private TravelPlanningContext context = default!;
    private IQueryable<Lodging> filteredLodgings;
    
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        
        // Verify the trip
        var trip = await context.Trip
            .FirstOrDefaultAsync(t => t.Id == TripId);
            
        if (trip != null)
        {
            // Trip exists, set the TripId
            Lodging.TripId = trip.Id;
            // Filter lodgings by TripId
            filteredLodgings = context.Lodging.Where(l => l.TripId == TripId);
        }
        else
        {
            NavigationManager.NavigateTo("/error", true);
            return;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}