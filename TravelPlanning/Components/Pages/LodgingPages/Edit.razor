@page "/lodgings/edit"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Lodging</h2>
<hr />
@if (Lodging is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Lodging" OnValidSubmit="UpdateLodging" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Lodging.Id" value="@Lodging.Id" />
                <div class="mb-3">
                    <label for="tripid" class="form-label">TripId:</label>
                    <InputNumber id="tripid" @bind-Value="Lodging.TripId" class="form-control" />
                    <ValidationMessage For="() => Lodging.TripId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="hotelname" class="form-label">HotelName:</label>
                    <InputText id="hotelname" @bind-Value="Lodging.HotelName" class="form-control" />
                    <ValidationMessage For="() => Lodging.HotelName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Lodging.Address" class="form-control" />
                    <ValidationMessage For="() => Lodging.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="checkindate" class="form-label">CheckInDate:</label>
                    <InputDate id="checkindate" @bind-Value="Lodging.CheckInDate" class="form-control" />
                    <ValidationMessage For="() => Lodging.CheckInDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="checkoutdate" class="form-label">CheckOutDate:</label>
                    <InputDate id="checkoutdate" @bind-Value="Lodging.CheckOutDate" class="form-control" />
                    <ValidationMessage For="() => Lodging.CheckOutDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Lodging.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Lodging.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dataupdated" class="form-label">DataUpdated:</label>
                    <InputDate id="dataupdated" @bind-Value="Lodging.DataUpdated" class="form-control" />
                    <ValidationMessage For="() => Lodging.DataUpdated" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/lodgings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Lodging? Lodging { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Lodging ??= await context.Lodging.FirstOrDefaultAsync(m => m.Id == Id);

        if (Lodging is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateLodging()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Lodging!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!LodgingExists(Lodging!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/lodgings");
    }

    private bool LodgingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Lodging.Any(e => e.Id == id);
    }
}
