@page "/lodgings/create"
@page "/lodgings/create/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>
<div class="background-container">


    <h1 style="color: black;">Create Lodging</h1>

<div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow">
        <div class="card-body">
          <h2 class="card-title text-center text-success mb-4">Lodding Details</h2>   
          <EditForm method="post" Model="Lodging" OnValidSubmit="AddLodging" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="row">
            <div class="mb-3" hidden>
                <label for="tripid" class="form-label">TripId:</label> 
                <InputNumber id="tripid" @bind-Value="Lodging.TripId" class="form-control" /> 
                <ValidationMessage For="() => Lodging.TripId" class="text-danger" /> 
            </div> 
              <div class="col-md-6 mb-3">
                <label for="hotelname" class="form-label">HotelName:</label> 
                <InputText id="hotelname" @bind-Value="Lodging.HotelName" class="form-control" /> 
                <ValidationMessage For="() => Lodging.HotelName" class="text-danger" /> 
            </div>
            
             <div class="col-md-6 mb-3">
                <label for="address" class="form-label">Address:</label> 
                <InputText id="address" @bind-Value="Lodging.Address" class="form-control" /> 
                <ValidationMessage For="() => Lodging.Address" class="text-danger" /> 
            </div>
             <div class="col-md-6 mb-3">
                <label for="checkindate" class="form-label">CheckInDate:</label> 
                <InputDate id="checkindate" @bind-Value="Lodging.CheckInDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                <ValidationMessage For="() => Lodging.CheckInDate" class="text-danger" /> 
            </div>
             <div class="col-md-6 mb-3">
                <label for="checkoutdate" class="form-label">CheckOutDate:</label> 
                <InputDate id="checkoutdate" @bind-Value="Lodging.CheckOutDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                <ValidationMessage For="() => Lodging.CheckOutDate" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Lodging.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Lodging.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="dataupdated" class="form-label">DataUpdated:</label> 
                <InputDate id="dataupdated" @bind-Value="Lodging.DataUpdated" class="form-control" /> 
                <ValidationMessage For="() => Lodging.DataUpdated" class="text-danger" /> 
            </div>  
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
             <div class="text-center mt-4">
                <a href="/lodgings/@TripId">Back to List</a>
                <br />
                <a href="/plan/@TripId">Back to Plan</a>
            </div>
       </div>
      </div>
    </div>
</div>
</div>


@code {
    [Parameter]
    public int TripId { get; set; }

    [SupplyParameterFromForm]
    private Lodging Lodging { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Set default dates
        Lodging.DateCreated = DateTime.UtcNow;
        Lodging.DataUpdated = DateTime.UtcNow;



        using var context = DbFactory.CreateDbContext();

        {
            // Verify the trip
            var trip = await context.Trip
                .FirstOrDefaultAsync(t => t.Id == TripId);

            if (trip != null)
            {
                // Trip doesn't exist or doesn't belong to this user
                Lodging.TripId = trip.Id;
            }

            else
            {
                NavigationManager.NavigateTo("/error", true);
                return;
            }
        }
    }
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddLodging()
    {
        using var context = DbFactory.CreateDbContext();
        context.Lodging.Add(Lodging);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/lodgings/{Lodging.TripId}");
    }
}
