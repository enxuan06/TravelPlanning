@page "/activities/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelPlanning.Domain
@using TravelPlanning.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>
<h1>Planned Activites </h1>
<br/>
<QuickGrid Class="table" Items="@filteredActivities">
    <AuthorizeView>
    <PropertyColumn Property="activity => activity.TripId" />
    </AuthorizeView>
    <PropertyColumn Property="activity => activity.ActivityName" />
    <PropertyColumn Property="activity => activity.Description" />
    <PropertyColumn Property="activity => activity.Address" />
    <PropertyColumn Property="activity => activity.DateCreated" Format="dd-MM-yyyy" />
    <PropertyColumn Property="activity => activity.DataUpdated" Format="dd-MM-yyyy" />
    <TemplateColumn Context="activity">
        <a href="/activities/edit/@activity.Id/@TripId" class="btn btn-secondary btn-sm">Edit</a> |
        <a href="/activities/details/@activity.Id/@TripId" class="btn btn-info btn-sm">Details</a> |
        <a href="/activities/delete/@activity.Id/@TripId"  class="btn btn-danger btn-sm">Delete</a>
    </TemplateColumn>
</QuickGrid>
<div class="mt-3">
    <a href="/plan/@TripId" class="btn btn-secondary">Continue planning</a>
</div>


@code {
    [Parameter]
    public int TripId { get; set; }

    [SupplyParameterFromForm]
    private Activity Activity { get; set; } = new();

    private TravelPlanningContext context = default!;
    private IQueryable<Activity> filteredActivities;

    // Add this to handle parameter changes
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Dispose old context if it exists
        if (context != null)
        {
            await context.DisposeAsync();
        }

        context = DbFactory.CreateDbContext();

        // Verify the trip
        var trip = await context.Trip
            .FirstOrDefaultAsync(t => t.Id == TripId);

        if (trip != null)
        {
            Activity.TripId = trip.Id;
            // Use ToListAsync() to materialize the query
            filteredActivities = context.Activity
                .Where(a => a.TripId == TripId)
                .AsNoTracking(); // Add this for better performance
        }
        else
        {
            NavigationManager.NavigateTo("/error", true);
            return;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}