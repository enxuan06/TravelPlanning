@page "/activities/delete/{id:int}/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<div>
    
    @if (activity is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h3>Are you sure you want to delete?</h3>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">TripId</dt>
            <dd class="col-sm-10">@activity.TripId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ActivityName</dt>
            <dd class="col-sm-10">@activity.ActivityName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@activity.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@activity.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@activity.DateCreated.ToString("dd-MM-yyyy")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DataUpdated</dt>
            <dd class="col-sm-10">@activity.DataUpdated.ToString("dd-MM-yyyy")</dd>
        </dl>
        <EditForm method="post" Model="activity" OnValidSubmit="DeleteActivity" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(activity is null)">Delete</button> |
            <a href="/activities/@TripId" class="btn btn-secondary">Cancel </a>
        </EditForm>
    }
</div>

@code {
    private Activity? activity;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int TripId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        activity = await context.Activity.FirstOrDefaultAsync(m => m.Id == Id && m.TripId == TripId);

        if (activity is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task DeleteActivity()
    {
        using var context = DbFactory.CreateDbContext();
        context.Activity.Remove(activity!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/activities/{TripId}");
    }
}