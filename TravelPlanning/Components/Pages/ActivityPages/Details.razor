@page "/activities/details/{id:int}/{TripId:int}"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>
<h1>Details</h1>
<div>
    <h2>Activity</h2>
    <hr />
    @if (activity is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">TripId</dt>
            <dd class="col-sm-10">@activity.TripId</dd>
            <dt class="col-sm-2">ActivityName</dt>
            <dd class="col-sm-10">@activity.ActivityName</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@activity.Description</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@activity.Address</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@activity.DateCreated.ToString("dd-MM-yyyy")</dd>
            <dt class="col-sm-2">DataUpdated</dt>
            <dd class="col-sm-10">@activity.DataUpdated.ToString("dd-MM-yyyy")</dd>
        </dl>
        <div>
            <a href="/activities/edit/@activity.Id/@TripId" class="btn btn-primary">Edit</a> |
            <a href="/activities/@TripId" class="btn btn-secondary">Back to List</a>
        </div>
    }
</div>

@code {
    private Activity? activity;

    [Parameter]
    public int id { get; set; }

    [Parameter]
    public int TripId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        activity = await context.Activity.FirstOrDefaultAsync(m => m.Id == id && m.TripId == TripId);

        if (activity is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }
}