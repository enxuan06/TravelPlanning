@page "/activities/edit"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Activity</h2>
<hr />
@if (Activity is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Activity" OnValidSubmit="UpdateActivity" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Activity.Id" value="@Activity.Id" />
                <div class="mb-3">
                    <label for="tripid" class="form-label">TripId:</label>
                    <InputNumber id="tripid" @bind-Value="Activity.TripId" class="form-control" />
                    <ValidationMessage For="() => Activity.TripId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="activityname" class="form-label">ActivityName:</label>
                    <InputText id="activityname" @bind-Value="Activity.ActivityName" class="form-control" />
                    <ValidationMessage For="() => Activity.ActivityName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Activity.Description" class="form-control" />
                    <ValidationMessage For="() => Activity.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Activity.Address" class="form-control" />
                    <ValidationMessage For="() => Activity.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Activity.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Activity.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dataupdated" class="form-label">DataUpdated:</label>
                    <InputDate id="dataupdated" @bind-Value="Activity.DataUpdated" class="form-control" />
                    <ValidationMessage For="() => Activity.DataUpdated" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/activities">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Activity? Activity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Activity ??= await context.Activity.FirstOrDefaultAsync(m => m.Id == Id);

        if (Activity is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateActivity()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Activity!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ActivityExists(Activity!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/activities");
    }

    private bool ActivityExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Activity.Any(e => e.Id == id);
    }
}
