@page "/activities/edit/{activityId:int}/{tripId:int}"
@using Microsoft.EntityFrameworkCore
@using TravelPlanning.Domain
@inject IDbContextFactory<TravelPlanning.Data.TravelPlanningContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Activity</PageTitle>

<div class="container py-4">
    @if (Activity is null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2"><em>Loading...</em></p>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header text-black">
                <h2 class="h4 mb-0">Editing Activity: @Activity.ActivityName</h2>
            </div>
            <div class="card-body">
                <div class="row justify-content-center">
                    <div class="col-md-8 col-lg-6">
                        <EditForm method="post" Model="Activity" OnValidSubmit="UpdateActivity" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary role="alert" class="alert alert-danger" />
                            <input type="hidden" name="Activity.Id" value="@Activity.Id" />

                            <div class="mb-3" hidden>
                                <label for="tripid" class="form-label">TripId:</label>
                                <InputNumber id="tripid" @bind-Value="Activity.TripId" class="form-control" />
                                <ValidationMessage For="() => Activity.TripId" class="text-danger" />
                            </div>

                            <div class="mb-4">
                                <label for="activityname" class="form-label fw-bold">Activity Name</label>
                                <InputText id="activityname" @bind-Value="Activity.ActivityName" class="form-control form-control-lg" />
                                <ValidationMessage For="() => Activity.ActivityName" class="text-danger" />
                            </div>

                            <div class="mb-4">
                                <label for="description" class="form-label fw-bold">Description</label>
                                <InputText id="description" @bind-Value="Activity.Description" class="form-control" />
                                <ValidationMessage For="() => Activity.Description" class="text-danger" />
                            </div>

                            <div class="mb-4">
                                <label for="address" class="form-label fw-bold">Address</label>
                                <InputText id="address" @bind-Value="Activity.Address" class="form-control" />
                                <ValidationMessage For="() => Activity.Address" class="text-danger" />
                            </div>

                            <div class="mb-3" hidden>
                                <label for="datecreated" class="form-label">DateCreated:</label>
                                <InputDate id="datecreated" @bind-Value="Activity.DateCreated" class="form-control" />
                                <ValidationMessage For="() => Activity.DateCreated" class="text-danger" />
                            </div>

                            <div class="mb-3" hidden>
                                <label for="dataupdated" class="form-label">DataUpdated:</label>
                                <InputDate id="dataupdated" @bind-Value="Activity.DataUpdated" class="form-control" />
                                <ValidationMessage For="() => Activity.DataUpdated" class="text-danger" />
                            </div>

                            <div class="d-flex justify-content-between align-items-center mt-4">

                                <button type="submit" class="btn btn-primary px-4">
                                    <i class="bi bi-save"></i> Save Changes
                                </button>

                                <a href="/activities/@tripId" class="btn btn-outline-secondary">
                                    <i class="bi bi-arrow-left"></i> Cancel
                                </a>
                                
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    [Parameter]
    public int ActivityId { get; set; }
    [Parameter]
    public int tripId { get; set; }

    [SupplyParameterFromForm]
    private Activity? Activity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Activity ??= await context.Activity.FirstOrDefaultAsync(m => m.Id == ActivityId && m.TripId == tripId);

        if (Activity is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateActivity()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Activity!).State = EntityState.Modified;
        await context.SaveChangesAsync();
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ActivityExist(Activity!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo($"/activities/{tripId}");
    }

    private bool ActivityExist(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Trip.Any(e => e.Id == id);
    }
}