@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TravelPlanning.Data
@using TravelPlanning.Services
@using Microsoft.AspNetCore.SignalR.Client

@inject UserManager<TravelPlanningUser> UserManager
@inject SignInManager<TravelPlanningUser> SignInManager
@inject IEmailSender<TravelPlanningUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager



<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />

<div class="alert alert-success">
    <p>Please check your email to confirm your account.</p>
    <p>If you don't see the email in your inbox, please check your spam folder.</p>
</div>

@code {
    private string? statusMessage;
    private HubConnection? hubConnection;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("RegisterConfirmation initialized");
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
            return;
        }

        // Set up SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/emailConfirmationHub"))
  
            .Build();

        Console.WriteLine($"Setting up SignalR for email: {Email}");

        hubConnection.On<string>("EmailConfirmed", async (confirmedEmail) =>
        {
            try
            {
                if (confirmedEmail == Email)  // Only redirect if it's this user's email
                {
                    Console.WriteLine("Emails match, attempting sign in");
                    await InvokeAsync(async () =>
                    {
                        var confirmedUser = await UserManager.FindByEmailAsync(confirmedEmail);
                        if (confirmedUser != null)
                        {
                            Console.WriteLine("User found, signing in");
                            await SignInManager.SignInAsync(confirmedUser, isPersistent: false);
                            Console.WriteLine("Redirecting to home");

                            
                            
                        }
                        else
                        {
                            Console.WriteLine("User not found after confirmation");
                        }
                    });
                }
                else
                {
                    Console.WriteLine($"Email mismatch. Expected: {Email}, Received: {confirmedEmail}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling email confirmation: {ex.Message}");
            }
        });

        // Add connection state handlers
        hubConnection.Closed += async (error) =>
        {
            Console.WriteLine($"SignalR connection closed: {error?.Message}");
            await Task.Delay(new Random().Next(0, 5) * 1000);
            await hubConnection.StartAsync();
        };

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR Connected Successfully");

            // Generate the confirmation token and send email
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("/Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendConfirmationLinkAsync(user, Email, callbackUrl);
            statusMessage = "Confirmation link has been sent to your email address.";
        }
        catch (Exception ex)
        {
            statusMessage = "Error sending confirmation email. Please try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
