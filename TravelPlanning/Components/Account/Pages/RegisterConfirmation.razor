@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TravelPlanning.Data
@using TravelPlanning.Services

@inject UserManager<TravelPlanningUser> UserManager
@inject IEmailSender<TravelPlanningUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />

<div class="alert alert-success">
    <p>Please check your email to confirm your account.</p>
    <p>If you don't see the email in your inbox, please check your spam folder.</p>
</div>

@code {

    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // public static string GetLocalIPAddress()
    // {
    //     var host = Dns.GetHostEntry(Dns.GetHostName());
    //     foreach (var ip in host.AddressList)
    //     {
    //         if (ip.AddressFamily == AddressFamily.InterNetwork)
    //         {
    //             return ip.ToString();
    //         }
    //     }
    //     throw new Exception("No network adapters with an IPv4 address in the system!");
    // }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
            return;
        }
        try
        {
            // Generate the confirmation token and send email
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("/Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendConfirmationLinkAsync(user, Email, callbackUrl);

            statusMessage = "Confirmation link has been sent to your email address.";
        }
        catch (Exception ex)
        {
            statusMessage = "Error sending confirmation email. Please try again later.";
            // You might want to log the error here
        }
    }
}
